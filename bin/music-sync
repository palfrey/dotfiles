#!/usr/bin/python

# TODO:
# file bugs about not supporting sftp://username:password@host.
# Also, sftp://u:p@h comes out as sftp://u@h in mounts, but not in the file when mounted...
#
# gio.File.make_directory_with_parents() *needs* an arg!

from optparse import OptionParser
import gio, gobject, glib
from sys import exit
from urllib import unquote

parser = OptionParser(usage="Usage: %prog [options] <source path> <destination path>")
parser.add_option("-c","--copy",dest="copy",default=False,action="store_true",help="Copy missing files")
parser.add_option("--only-missing",dest="only_missing",default=False,action="store_true",help="Only report/copy missing files")
(opts,args) = parser.parse_args()

if len(args)!=2:
	parser.error("Need a source and destination path!")

copy = opts.copy

# FIXME: Workaround to u:p@h issue mentioned above
def FileWithPassword(commandline):
	at = commandline.find("@")
	colon = commandline.find(":")
	if colon != -1:
		colon2 = commandline[colon+1:].find(":")
		if colon2 != -1:
			colon2 += colon+1
	else:
		colon2 = -1
	if at !=-1 and colon2 != -1 and colon2<at: # last needed to ignore ports
		password = commandline[colon2+1:at]
		commandline = commandline[:colon2]+commandline[at:]
	else:
		password = None
	ret = gio.File(commandline)
	ret._password = password
	return ret

roots = [FileWithPassword(args[0]),FileWithPassword(args[1])]

def password(mo, prompt,username,password, flags, vol):
	if password == "" and vol._password!=None:
		password = vol._password
	mo.set_username(username)
	mo.set_password(password)
	mo.reply(gio.MOUNT_OPERATION_HANDLED)

def mount_callback(volume, result):
	global mount_issues
	try:
		res = r.mount_enclosing_volume_finish(result)
		if res:
			print "Mounted %s"%volume.get_uri()
		else:
			print "Error while mounting %s!"%volume.get_uri()
			mount_issues = True
	except (gio.Error,glib.GError),e:
		print "Exception while mounting %s: %s"%(volume.get_uri(),e.message)
		mount_issues = True
	global tomount
	tomount -=1
	if tomount == 0:
		global ml
		ml.quit()

mount_issues = False
tomount = 0

for r in roots:
	try:
		if not r.is_native():
			print "Trying to mount", r.get_uri(), "...",
			r.find_enclosing_mount()
			print "which is already mounted"
	except Exception, e:
		print
		if e.code == 16: # not mounted
			mo = gio.MountOperation()
			mo.connect("ask-password",password,r)
			r.mount_enclosing_volume(mo,mount_callback)
			tomount +=1
		elif e.code == 1: # "could not find enclosing mount"
			print "Can't seem to use %s as a mount point (detailed error: %s)"%(r.get_uri(),e.message)
			mount_issues = True
		else:
			raise

if tomount >0:
	ml = gobject.MainLoop()
	ml.run()
if mount_issues:
	exit(1)

missing = []

def ciexists(path): # case insensitive exists
	pth = cipath(path)
	if pth!=None:
		return pth.query_exists()
	else:
		print "problem constructing",path
		raise Exception
		return False

def cipath(path): # case insensitive path
	if path == None or path.query_exists():
		return path
	#print "path",path
	bits = []
	parent = path
	while parent!=None:
		top_level = parent
		bits.append(parent.get_basename())
		parent = parent.get_parent()
	bits.reverse()
	if bits[0] == "/":
		bits = bits[1:]

	sofar = top_level
	exists = True
	for item in bits:
		if exists and not sofar.get_child(item).query_exists():
			for x in sofar.enumerate_children(",".join([gio.FILE_ATTRIBUTE_STANDARD_NAME,gio.FILE_ATTRIBUTE_STANDARD_TYPE])):
				if item.lower() == x.get_name().lower():
					sofar = sofar.get_child(x.get_name())
					break
			else:
				exists = False
				sofar = sofar.get_child(item)
		else:
			sofar = sofar.get_child(item)
	else:
		return sofar

def _walker(root):
	dirs = []
	files = []
	try:
		for c in root.enumerate_children(",".join([gio.FILE_ATTRIBUTE_STANDARD_NAME,gio.FILE_ATTRIBUTE_STANDARD_TYPE])):
			name = c.get_name()
			if name[0] == ".": # skip hidden folders:
				continue
			kind = c.get_file_type()
			if kind == gio.FILE_TYPE_DIRECTORY:
				dirs.append(name)
			elif kind == gio.FILE_TYPE_REGULAR:
				files.append(name)
			elif kind == gio.FILE_TYPE_SPECIAL: # can't sync these
				pass
			else:
				raise Exception,kind
	except gio.Error,e:
		if e.code == 14: # permission denied
			raise Exception, "Couldn't access %s. Do you have sufficient permissions?"%root.get_uri()
		else:
			raise
	yield (root,tuple(dirs),files)
	for d in sorted(dirs):
		for ret in _walker(root.get_child(d)):
			yield ret

def walk(root):
	for ret in _walker(root):
		yield ret

for root,_,files in walk(roots[0]):
	for x in sorted(files):
		if x.find("mp3")==-1 and x.find("ogg")==-1 and x.find("m4a")==-1:
			continue
		f = unquote(root.get_child(x).get_uri()[len(roots[0].get_uri())+1:])
		of = cipath(roots[1].get_child(f))
		f = root.get_child(x)
		#print "f",f,of.get_uri()
		sf = f.query_info(gio.FILE_ATTRIBUTE_STANDARD_SIZE).get_size()
		if ciexists(of):
			sof = of.query_info(gio.FILE_ATTRIBUTE_STANDARD_SIZE).get_size()
		else:
			sof = 0
		if not ciexists(of) or sf!=sof:
			if ciexists(of):
				if not opts.only_missing:
					time_source = f.query_info(gio.FILE_ATTRIBUTE_TIME_MODIFIED).get_attribute_uint64(gio.FILE_ATTRIBUTE_TIME_MODIFIED)
					time_dest = of.query_info(gio.FILE_ATTRIBUTE_TIME_MODIFIED).get_attribute_uint64(gio.FILE_ATTRIBUTE_TIME_MODIFIED)
					if time_source > time_dest:
						print "filesizes (%d, %d) aren't equal"%(sf,sof),unquote(of.get_uri())
			else:
				print "missing file",unquote(of.get_uri())
			if copy and (not opts.only_missing or not ciexists(of)):
				parent = of.get_parent()
				if not ciexists(parent):
					print "making %s"%unquote(parent.get_uri())
					parent.make_directory_with_parents(gio.Cancellable())
				print "%s => %s"%(unquote(f.get_uri()),unquote(of.get_uri()))
				f.copy(of,flags=gio.FILE_COPY_OVERWRITE)
				
